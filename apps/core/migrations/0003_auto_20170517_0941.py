# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-05-17 16:41
from __future__ import unicode_literals

import core.helpers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_historicaltag'),
        ('core', '0002_auto_20160516_1308'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalSampleInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_condition_health_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Disease condition/health status')),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('X', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Sex')),
                ('patient_biopsy_date', models.DateField(blank=True, null=True, verbose_name='Patient biopsy date')),
                ('anatomic_site', models.CharField(blank=True, max_length=50, null=True, verbose_name='Anatomic site')),
                ('anatomic_sub_site', models.CharField(blank=True, max_length=50, null=True, verbose_name='Anatomic sub-site')),
                ('developmental_stage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Developmental stage')),
                ('tissue_type', models.CharField(blank=True, choices=[('N', 'Normal'), ('B', 'Benign'), ('PM', 'Pre-malignant'), ('M', 'Malignant'), ('NNP', 'Non-neoplastic Disease'), ('U', 'Undetermined'), ('HP', 'Hyperplasia'), ('MP', 'Metaplasia'), ('DP', 'Dysplasia')], max_length=50, null=True, verbose_name='Tissue type')),
                ('cell_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cell type')),
                ('pathology_disease_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pathology/disease name')),
                ('additional_pathology_info', models.CharField(blank=True, max_length=50, null=True, verbose_name='Additional pathology information')),
                ('grade', models.CharField(blank=True, max_length=50, null=True, verbose_name='Grade')),
                ('stage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Stage')),
                ('tumour_content', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tumor content (%)')),
                ('pathology_occurrence', models.CharField(blank=True, choices=[('PR', 'Primary'), ('RC', 'Recurrent or Relapse'), ('ME', 'Metastatic'), ('RM', 'Remission'), ('UN', 'Undetermined'), ('US', 'Unspecified')], max_length=50, null=True, verbose_name='Pathology occurrence')),
                ('treatment_status', models.CharField(blank=True, choices=[('PR', 'Pre-treatment'), ('IN', 'In-treatment'), ('PO', 'Post-treatment'), ('NA', 'N/A'), ('UN', 'Unknown')], max_length=50, null=True, verbose_name='Treatment status')),
                ('family_information', models.CharField(blank=True, max_length=50, null=True, verbose_name='Family information')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='HistoricalLibrary',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('pool_id', models.CharField(max_length=50, null=True, verbose_name='Chip ID')),
                ('jira_ticket', models.CharField(max_length=50, null=True, verbose_name='Jira ticket')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'history_library',
                'verbose_name': 'historical library',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSample',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sample_id', models.CharField(max_length=50, null=True, verbose_name='Sample ID')),
                ('taxonomy_id', models.CharField(blank=True, default='9606', max_length=50, null=True, verbose_name='Taxonomy ID')),
                ('sample_type', models.CharField(blank=True, choices=[('P', 'Patient'), ('C', 'Cell Line'), ('X', 'Xenograft'), ('O', 'Other')], max_length=50, null=True, verbose_name='Sample type')),
                ('anonymous_patient_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Anonymous patient ID')),
                ('cell_line_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cell line ID')),
                ('xenograft_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Xenograft ID')),
                ('xenograft_recipient_taxonomy_id', models.CharField(blank=True, default='10090', max_length=50, null=True, verbose_name='Xenograft recipient taxonomy ID')),
                ('strain', models.CharField(blank=True, max_length=50, null=True, verbose_name='Strain')),
                ('xenograft_biopsy_date', models.DateField(blank=True, null=True, verbose_name='Xenograft biopsy date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'history_sample',
                'verbose_name': 'historical sample',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSequencing',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('pool_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Chip ID')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='on 2nd and 3rd index-specific read', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read2 length')),
                ('sequencing_goal', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencing goal (# lanes)')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='H2500', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'history_sequencing',
                'verbose_name': 'historical sequencing',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool_id', models.CharField(max_length=50, null=True, verbose_name='Chip ID')),
                ('jira_ticket', models.CharField(max_length=50, null=True, verbose_name='Jira ticket')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('projects', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of project names.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Project')),
                ('relates_to', models.ManyToManyField(blank=True, null=True, related_name='_library_relates_to_+', to='core.Library', verbose_name='Relates to')),
            ],
            options={
                'ordering': ('sample', 'pool_id'),
            },
            bases=(models.Model, core.helpers.FieldValue, core.helpers.LibraryAssistant),
        ),
        migrations.CreateModel(
            name='LibraryConstructionInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chip_format', models.CharField(blank=True, choices=[('W', 'Wafergen'), ('M', 'Microfluidic'), ('B', 'Bulk'), ('O', 'Other')], default='W', max_length=50, null=True, verbose_name='Chip format')),
                ('library_construction_method', models.CharField(blank=True, default='Nextera (Illumina)', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='genome', max_length=50, null=True, verbose_name='Library type')),
                ('library_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Library notes')),
                ('library_prep_date', models.DateField(blank=True, null=True, verbose_name='Library prep date')),
                ('number_of_pcr_cycles', models.IntegerField(blank=True, default=11, null=True, verbose_name='Number of PCR cycles')),
                ('protocol', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Protocol')),
                ('spotting_location', models.CharField(blank=True, choices=[('A', 'Aparicio Lab'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Library', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='LibraryQuantificationAndStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_size', models.IntegerField(blank=True, null=True, verbose_name='Average size (bp)')),
                ('dna_concentration_nm', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (nM)')),
                ('dna_concentration_ngul', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (ng/uL)')),
                ('dna_volume', models.CharField(blank=True, max_length=50, null=True, verbose_name='DNA volume (uL)')),
                ('freezer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Freezer')),
                ('rack', models.IntegerField(blank=True, null=True, verbose_name='Rack')),
                ('shelf', models.IntegerField(blank=True, null=True, verbose_name='Shelf')),
                ('box', models.IntegerField(blank=True, null=True, verbose_name='Box')),
                ('position_in_box', models.IntegerField(blank=True, null=True, verbose_name='Position in box')),
                ('library_tube_label', models.CharField(blank=True, max_length=50, null=True, verbose_name='Library tube label')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('quantification_method', models.CharField(blank=True, default='Bioanalyzer', max_length=50, null=True, verbose_name='Quantification method')),
                ('size_range', models.CharField(blank=True, max_length=50, null=True, verbose_name='Size range (bp)')),
                ('size_selection_method', models.CharField(blank=True, default='AmpureXP', max_length=50, null=True, verbose_name='Size selection method')),
                ('storage_medium', models.CharField(blank=True, default='TE 10:0.1', max_length=50, null=True, verbose_name='Storage medium')),
                ('agilent_bioanalyzer_xad', models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_path, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.FileField(blank=True, max_length=200, null=True, upload_to=core.helpers.upload_path, verbose_name='Agilent bioanalyzer image file')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Library', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='LibrarySampleDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('sample_spot_date', models.DateField(blank=True, null=True, verbose_name='Sample spot date')),
                ('spotting_location', models.CharField(blank=True, choices=[('A', 'Aparicio Lab'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Library', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='Sequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Chip ID')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='on 2nd and 3rd index-specific read', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read2 length')),
                ('sequencing_goal', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencing goal (# lanes)')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='H2500', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Library', verbose_name='Library')),
                ('relates_to', models.ManyToManyField(blank=True, null=True, related_name='_sequencing_relates_to_+', to='core.Sequencing', verbose_name='Relates to')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='SequencingDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flow_cell_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Flow cell/Lane ID')),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC library ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(blank=True, default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('sequencing', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Sequencing', verbose_name='Sequencing')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='SublibraryInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample')),
                ('row', models.IntegerField(blank=True, null=True, verbose_name='Row')),
                ('column', models.IntegerField(blank=True, null=True, verbose_name='Column')),
                ('img_col', models.IntegerField(blank=True, null=True, verbose_name='Image Column')),
                ('file_ch1', models.CharField(blank=True, max_length=50, null=True, verbose_name='File_Ch1')),
                ('file_ch2', models.CharField(blank=True, max_length=50, null=True, verbose_name='File_Ch2')),
                ('fld_section', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fld_Section')),
                ('fld_index', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fld_Index')),
                ('num_live', models.IntegerField(blank=True, null=True, verbose_name='Num_Live')),
                ('num_dead', models.IntegerField(blank=True, null=True, verbose_name='Num_Dead')),
                ('num_other', models.IntegerField(blank=True, null=True, verbose_name='Num_Other')),
                ('rev_live', models.IntegerField(blank=True, null=True, verbose_name='Rev_Live')),
                ('rev_dead', models.IntegerField(blank=True, null=True, verbose_name='Rev_Dead')),
                ('rev_other', models.IntegerField(blank=True, null=True, verbose_name='Rev_Other')),
                ('spot_class', models.CharField(blank=True, max_length=50, null=True, verbose_name='Spot_Class')),
                ('index_i7', models.CharField(blank=True, max_length=50, null=True, verbose_name='Index_I7')),
                ('primer_i7', models.CharField(blank=True, max_length=50, null=True, verbose_name='Primer_I7')),
                ('index_i5', models.CharField(blank=True, max_length=50, null=True, verbose_name='Index_I5')),
                ('primer_i5', models.CharField(blank=True, max_length=50, null=True, verbose_name='Primer_I5')),
                ('pick_met', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pick_Met')),
                ('spot_well', models.CharField(blank=True, max_length=50, null=True, verbose_name='Spot_Well')),
                ('num_drops', models.IntegerField(blank=True, null=True, verbose_name='Num_Drops')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Library', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.AlterModelOptions(
            name='sample',
            options={'ordering': ('sample_id',)},
        ),
        migrations.RemoveField(
            model_name='sample',
            name='create_date',
        ),
        migrations.RemoveField(
            model_name='sample',
            name='jira_ticket',
        ),
        migrations.RemoveField(
            model_name='sample',
            name='pool_id',
        ),
        migrations.RemoveField(
            model_name='sample',
            name='tube_label',
        ),
        migrations.AddField(
            model_name='sample',
            name='anonymous_patient_id',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Anonymous patient ID'),
        ),
        migrations.AddField(
            model_name='sample',
            name='cell_line_id',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Cell line ID'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sample_type',
            field=models.CharField(blank=True, choices=[('P', 'Patient'), ('C', 'Cell Line'), ('X', 'Xenograft'), ('O', 'Other')], max_length=50, null=True, verbose_name='Sample type'),
        ),
        migrations.AddField(
            model_name='sample',
            name='strain',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Strain'),
        ),
        migrations.AddField(
            model_name='sample',
            name='taxonomy_id',
            field=models.CharField(blank=True, default='9606', max_length=50, null=True, verbose_name='Taxonomy ID'),
        ),
        migrations.AddField(
            model_name='sample',
            name='xenograft_biopsy_date',
            field=models.DateField(blank=True, null=True, verbose_name='Xenograft biopsy date'),
        ),
        migrations.AddField(
            model_name='sample',
            name='xenograft_id',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Xenograft ID'),
        ),
        migrations.AddField(
            model_name='sample',
            name='xenograft_recipient_taxonomy_id',
            field=models.CharField(blank=True, default='10090', max_length=50, null=True, verbose_name='Xenograft recipient taxonomy ID'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='sample_id',
            field=models.CharField(max_length=50, null=True, verbose_name='Sample ID'),
        ),
        migrations.AddField(
            model_name='library',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Sample', verbose_name='Sample'),
        ),
        migrations.AddField(
            model_name='historicalsequencing',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Library'),
        ),
        migrations.AddField(
            model_name='historicallibrary',
            name='sample',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample'),
        ),
        migrations.AddField(
            model_name='additionalsampleinformation',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Sample', verbose_name='Sample'),
        ),
    ]
